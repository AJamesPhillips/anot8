
import json
import os
from pathlib import Path

from id_mappings import upsert_file_perma_ids_mapping_for_all_vaults, get_id_map
from vault_config import get_vault_configs
from common import print_warning


def upsert_perma_id_mappings_and_anot8_config ():
    upsert_file_perma_ids_mapping_for_all_vaults()
    update_anot8_configs()


def update_anot8_configs ():
    vault_configs = get_vault_configs()

    for vault_config in vault_configs.values():
        update_anot8_config(vault_config)


def get_anot8_config_dir_path (vault_config):
    return "{root_path}anot8_org_config/".format(**vault_config)


def get_anot8_config_file_path (vault_config):
    anot8_config_dir_path = get_anot8_config_dir_path(vault_config)
    return anot8_config_dir_path + "{vault_id}.json".format(**vault_config)


def update_anot8_config (vault_config):
    anot8_org_config_file_path = get_anot8_config_file_path(vault_config)

    publish_root_path = vault_config["publish_root_path"]

    if not publish_root_path:
        # print_warning("No publish_root_path attribute for vault_config {vault_id}, {vault_name}".format(**vault_config))
        if os.path.isfile(anot8_org_config_file_path):
            os.remove(anot8_org_config_file_path)
        return

    id_to_relative_file_name = get_id_map(vault_config)["id_to_relative_file_name"]

    dir_path = get_anot8_config_dir_path(vault_config)
    Path(dir_path).mkdir(parents=True, exist_ok=True)
    with open(anot8_org_config_file_path, "w") as f:
        config = dict(
            THIS_FILE_IS_AUTO_GENERATED="DO NOT EDIT THIS FILE",
            **vault_config,
            id_to_relative_file_name=id_to_relative_file_name,
        )
        del config["root_path"]
        del config["vault_name"]
        json.dump(config, f, indent=0, ensure_ascii=False)
